# -*- auto-fill-function: nil; eval: (add-hook 'after-save-hook 'org-babel-tangle nil t); -*-

* [2025-09-30 Tue]
Back at it!

This new project felt too simple.
I kinda underestimated it and couldn't do something I wanted: a clean commit history from the beginning.
I'll try another approach today: write the commit messages /before/ coding.
Let's see how that goes.
(Still working on the [[https://github.com/rafaelbeirigo/odin-recipes][project Recipes from Odin]]).

Edit: You can see the final version of the page [[https://rafaelbeirigo.github.io/odin-recipes/][here]] (three recipes inspired on Harry Potter's books).

** Systems Thinking
Just heard about it this week.
I believe I applied it today.
I love it!

** Results: Writing the commits before coding
/Very/ helpful, much better!
Knowing that each task had a purpose, and that we would get to the final product was very empowering and calming.
I'd call it a success!

** Seinfeld Checkmark

[[file:images/2025-09-30_seinfeld.jpeg]]

* [2025-09-29 Mon]
Back to HTML!

We're approaching a project on Odin!

Starting with Git.

Just learned about Commit Messages.

Next is a project, and then we start CSS.

** Digression on Git

I have been thinking about yesterday's work, with lots of refactoring, while porting to LP.
It was difficult to keep a clean commit history.

I believe the best way to accomplish it is by planning beforehand.
I have some ideas, that I will experiment with in this next project.

** Project: Recipes

Check it out [[https://github.com/rafaelbeirigo/odin-recipes][here]].

** Seinfeld Checkmark

Hoje foi um dia difícil, mas consegui o X!

[[file:images/2025-09-29_seinfeld.jpeg]]

* [2025-09-28 Sun]
Thought of doing some elisp coding this sunday.
I have this [[https://github.com/rafaelbeirigo/ma-github][project that creates Github repositories directly from inside Emacs]].
As they say: "Life is better when you don't have to leave your editor".

Last time I touched it was 3 years ago.

Today I thought of checking it out, seeing how it stands, and maybe hacking it a bit.
So, for this coding, all the action will happen  [[https://github.com/rafaelbeirigo/ma-github/commits/dev/][commit history for the dev branch of the repository of that project]].

This is how it went.

** Create a Github token
*** First try: Generate a classic token with all the powers
**** Generate
I just checked out if I had the repo in my machine, and it was there.

Then I followed the repo's instructions to run it.
You need an *access token*, and I had to create one.
The proccess was cryptic:
- You have to choose the powers of your token;
- I wanted the power to *create a repository*;
- I couldn't find that option there.


After getting scared by the implications of them insisting on an /expiration date/ for the token, I wanted to create the least powerful, but still useful token.
Invested a dozen minutes trying to read throught the docs, and then realized *I was going down a rabbit hole*.

Decided on just creating the most powerful token possible, with a very short expiration date---seven days (/The Ring/, anyone?).
The steps were:

1. Open the [[https://github.com/settings/tokens/new][page to generate a /Classic/ token]]
2. Put on *Note*: ma-github
3. On *Expiration*: 7 days
4. On *Select scopes*: select everything
5. Click *Generate token*
6. Copy the generated token and paste it on a safe place

**** Access from inside Emacs
Here I Needed some help from ChatGPT:

#+begin_quote
i want to have my Github token accessed by Emacs
How should I do it?
#+end_quote

Then ChatGPT inspired me to change gears.

*** Second try (ChatGPT): Generate a fine-grained token with minimal powers
**** Generate
1. Go to the [[https://github.com/settings/personal-access-tokens][Github page to generate a fine-grained token]]
2. Click *Generate new token*
3. *Token name*: ma-github
4. *Resource owner*: the Github account where the repositories will be created
5. *Expiration*: 30 days
6. *Repository access*: All repositories
7. *Permissions*
   1. Click the *+* button on the upper-right corner
   2. Select *Administration*
   3. Click outside of the selection thingy to make it disappear
   4. On the new item *Administration*, change from *Read-only* to *Read and write*
8. Click *Generate token*
9. Click *Generate token* again, on the pop-up window
10. Copy the token
11. Paste it somewhere safe

**** Access from inside Emacs

***** Set up *authinfo*

1. Follow this [[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][instructions to create =~/.authinfo.gpg~]]

   1. Create a key

      1. Open a terminal and run the command

         #+begin_src shell
         gpg --gen-key
         #+end_src

      2. Inform your real name and then your email

      3. It will generate a key in =~/.gnupg=

2. Create (or edit) the file =~/.authinfo.gpg= in Emacs. Use this format (one line per entry):

   #+begin_example
   machine api.github.com login YOUR_GITHUB_USERNAME password <YOUR_TOKEN>
   #+end_example

3. Change the permissions of the file to make it more secure

   #+begin_src shell
   chmod 600 ~/.authinfo.gpg
   #+end_src

***** Fetch the token using *authinfo*

This code snippet uses the token created before to give =ma-github= access to Github.
It

1. Asks for a Github username, and then

2. Sets the environment variables needed by =ma-github=.

#+begin_src elisp
;; ensure auth-source uses the default backends (it does by default)
;; Here is a tiny helper that reads the token and (optionally) sets env var:

(require 'auth-source)

(defun ma-github-token-from-authinfo (&optional username)
  "Find a GitHub token from auth-source for api.github.com and return the secret string."
  (let* ((host "api.github.com")
         (user (or username user-login-name))
         (entry (car (auth-source-search :host host :user user :max 1))))
    (when entry
      (let ((secret (plist-get entry :secret)))
        (if (functionp secret) (funcall secret) secret)))))

;; optional: make token available to Emacs subprocesses (e.g. `curl` from Emacs)
(let* ((user (read-string "Github username: "))
       (tok (my/github-token-from-authinfo user)))
  (when user
    (setenv "MA_GITHUB_USER" tok))
  (when tok
    (setenv "MA_GITHUB_TOKEN" tok)))
#+end_src

Now let's try and create a repo with ma-github.

#+begin_quote
M-x ma-github-create
#+end_quote

And here is the [[https://github.com/rafaelbeirigo/hello-ma-github][Github repository created using ma-github]]!

Now let's integrate the *auth-source* functionality.

Timeline (I tried, but too distracting!):

1. [2025-09-28 Sun 13:13] Breaking the code down in LP blocks.

2. [2025-09-28 Sun 13:13] info on defun optional arguments

3. [...] All the action is on the [[https://github.com/rafaelbeirigo/ma-github/commits/dev/][commit history for the dev branch]].

4. [2025-09-28 Sun 21:02] Ported to LP and tested: (ma-github-create NAME)

I tried my best to be organized, but it's messy.
Next step is to reorganize the commits.
Not for /functionality/, but /learning/.

** Seinfeld Checkmark

[[file:images/2025-09-28_seinfeld.jpeg]]

* [2025-09-27 Sat]
Starting later today.
Overslept.

Let's do this!

** Lists
#+begin_quote
To get some practice using lists, create a new HTML document and create the following lists:
1. An unordered shopping list of your favorite foods
2. An ordered list of todo’s you need to get done today
3. An unordered list of places you’d like to visit someday
4. An ordered list of your all time top 5 favorite video games or movies
#+end_quote

Create the structure for main HTML doc:

[[file:odin/assignments/foundations/lists/index.html][odin/assignments/foundations/lists/index.html]] ≡

#+begin_src html :tangle ~/dev/webdev-study/odin/assignments/foundations/lists/index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>My first page from Odin</title>
  </head>

  <body>
    <<food>>
    <<todos>>
    <<places>>
    <<games>>
  </body>
</html>
#+end_src

#+begin_quote
1. An unordered shopping list of your favorite foods
#+end_quote

~<<food>> +≡~

#+begin_src html :noweb-ref food
<h1>My favorite foods</h1>
<ul>
  <li>Lasagna</li>
  <li>Pork ribs</li>
  <li>Avocado with lemon</li>
  <li>Oatmeal</li>
  <li>Warm bread with (real) butter</li>
</ul>
#+end_src

#+begin_quote
2. An ordered list of todo’s you need to get done today
#+end_quote

~<<todos>> +≡~

#+begin_src html :noweb-ref todos
<h1>Todos for Todays</h1>
<ol>
  <li>Code a minimum of 1h</li>
  <li>Exercise and stretch</li>
  <li>Busking</li>
  <li>Play with dogs</li>
  <li>RPG with ChatGPT</li>
</ol>
#+end_src

#+begin_quote
3. An unordered list of places you’d like to visit someday
#+end_quote

~<<places>> +≡~

#+begin_src html :noweb-ref places
<h1>Places I want to visit</h1>
<ul>
  <li>Paris</li>
  <li>Japan</li>
  <li>Portugal</li>
  <li>Germany</li>
  <li>Canada</li>
</ul>
#+end_src

#+begin_quote
4. An ordered list of your all time top 5 favorite video games or movies
#+end_quote

~<<games>> +≡~

#+begin_src html :noweb-ref games
<h1>My favorite games of all time</h1>
<ol>
  <li>Zelda (Ocarina)</li>
  <li>Pokémon Blue/R./Y.</li>
  <li>Metal Slug</li>
  <li>Super Mario World</li>
  <li>Harvest Moon (NES)</li>
</ol>
#+end_src

** [2025-09-27 Sat 11:40] Links and Images
*** Links
:PROPERTIES:
:header-args:html: :session *links-and-images*
:END:
#+begin_quote
1. Create a new directory named odin-links-and-images.
#+end_quote

#+begin_src bash
mkdir ./odin/assignments/foundations/odin-links-and-images
#+end_src

#+RESULTS:

#+begin_quote
2. Within that directory, create a new file named index.html.
3. Open the file in VS Code and fill in the usual HTML boilerplate.
#+end_quote

[[file:odin/assignments/foundations/odin-links-and-images/index.html][odin/assignments/foundations/odin-links-and-images/index.html]] ≡

#+begin_src html :tangle odin/assignments/foundations/odin-links-and-images/index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>My first page from Odin</title>
  </head>

  <body>
    <<body Content odin-links-and-images>>
  </body>
</html>
#+end_src

#+begin_quote
4. Finally, add the following h1 to the body:

<h1>Homepage</h1>
#+end_quote

~<<body Content odin-links-and-images>> +≡~

#+begin_src html :noweb-ref body Content odin-links-and-images
<h1>Homepage</h1>
#+end_src

[2025-09-27 Sat 11:57] Pausing for lunch.

[2025-09-27 Sat 17:57] Coming back, after busking.

The Web is made out of links.
Let's add our first one.
We need to add an *anchor* element, and give it some attributes.
We'll leave a placeholder for the attributes.

~<<body Content odin-links-and-images>> +≡~

#+begin_src html :noweb-ref body Content odin-links-and-images :noweb-seb nil
<a
  <<attributes for Odin about page href>>
  >About the Odin Project.</a>
#+end_src

The first attribute contains the /link/ itself, and is called *href*.

~<<attributes for Odin about page href>> +≡~

#+begin_src html :noweb-ref attributes for Odin about page href
href="https://www.theodinproject.com/about"
#+end_src

The link now would open on the same tab.
Let's open in a new one, using the attribute *target*.

~<<attributes for Odin about page href>> +≡~

#+begin_src html :noweb-ref attributes for Odin about page href
target="_blank"
#+end_src

Now we add some security measures.
This new attribute and value prevents some dangers when linking to another page.
Possible attacks include phishing and tabnabbing.

~<<attributes for Odin about page href>> +≡~

#+begin_src html :noweb-ref attributes for Odin about page href
rel="noopener noreferrer"
#+end_src

**** Relative links

Create a page on our own server.

*NOTE:* the =pages/= was added later in this assignment.

[[file:odin/assignments/foundations/odin-links-and-images/about.html][odin/assignments/foundations/odin-links-and-images/pages/about.html]] ≡

#+begin_src html :tangle odin/assignments/foundations/odin-links-and-images/pages/about.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>Odin Links and Images</title>
  </head>

  <body>
    <h1>About Page</h1>
    <<le Charles>>
  </body>
</html>
#+end_src

Add a /relative/ link to it on the main page.

~<<body Content odin-links-and-images>> +≡~

#+begin_src html :noweb-ref body Content odin-links-and-images
<a href="pages/about.html">About</a>
#+end_src

Let's organize it: add a folder for all the other pages besides =index.html=.

#+begin_src shell :dir ~/dev/webdev-study/odin/assignments/foundations/odin-links-and-images/
mkdir pages
#+end_src

#+RESULTS:

And move =about.html= there.

#+begin_src shell :dir ~/dev/webdev-study/odin/assignments/foundations/odin-links-and-images/
mv about.html pages
#+end_src

#+RESULTS:

*** Images
:PROPERTIES:
:header-args: :dir ~/dev/webdev-study/odin/assignments/foundations/odin-links-and-images/
:END:

Assignment.

#+begin_quote
1. Create a new directory named images within the odin-links-and-images project.
#+end_quote

#+begin_src shell
mkdir images
#+end_src

#+RESULTS:

#+begin_quote
2. Next, download our practice image and move it into the images directory we just created.
3. Rename the image to dog.jpg.
#+end_quote

#+begin_src shell
wget --output-document=images/dog.jpg https://unsplash.com/photos/Mv9hjnEUHR4/download?force=true&w=640
#+end_src

#+RESULTS:

Add the image to the home page, and the About one (using relative path).
Both will have some attributes that are the same.
Let's give them a placeholder.

~<<body Content odin-links-and-images>> +≡~

#+begin_src html :noweb-ref body Content odin-links-and-images
<img src="./images/dog.jpg"
<<dog pic attributes>>
  >
#+end_src

Now add the pic to the About page, using a relative path to the parent folder.

~<<le Charles>> +≡~

#+begin_src html :noweb-ref le Charles
<img src="../images/dog.jpg"
<<dog pic attributes>>
  >
#+end_src

Add the alternative text.

~<<dog pic attributes>> +≡~

#+begin_src html :noweb-ref dog pic attributes
alt="A black dog (pug) with a gray wool blanket."
#+end_src

**** Image size attributes
Now the size attributes.

~<<dog pic attributes>> +≡~

#+begin_src html :noweb-ref dog pic attributes
width="604" height="806"
#+end_src

*** [2025-09-27 Sat 19:37] Assignment on [[https://internetingishard.netlify.app/html-and-css/links-and-images/][Interneting]]
:PROPERTIES:
:header-args:
:END:

[[file:odin/assignments/foundations/interneting-links-and-images/links.html][odin/assignments/foundations/interneting-links-and-images/links.html]] ≡

#+begin_src html :tangle odin/assignments/foundations/interneting-links-and-images/links.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Links</title>
    <meta charset="UTF-8">
  </head>
  <body>
    <h1>Links</h1>
    <p>This particular page is about links! There are three kinds of links:</p>

    <ul>
      <<links>>
    </ul>
  </body>
</html>
#+end_src

[[file:odin/assignments/foundations/interneting-links-and-images/images.html][odin/assignments/foundations/interneting-links-and-images/images.html]] ≡

#+begin_src html :tangle odin/assignments/foundations/interneting-links-and-images/images.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Images</title>
    <meta charset="UTF-8">
  </head>
  <body>
    <h1>Images</h1>
    <p>This page covers common image formats, but you may also be looking for
      <a href='links.html'>links</a> and
      <a href='misc/extras.html'>useful extras</a>.
    </p>
    <<images>>
  </body>
</html>
#+end_src

[[file:odin/assignments/foundations/interneting-links-and-images/misc/extras.html][odin/assignments/foundations/interneting-links-and-images/misc/extras.html]] ≡

#+begin_src html :tangle odin/assignments/foundations/interneting-links-and-images/misc/extras.html :mkdirp yes
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Extras</title>
    <meta charset="UTF-8">
  </head>
  <body>
    <h1>Extras</h1>
    <p>This page is about miscellaneous HTML things,
      but you may also be interested in
      <a href='../links.html'>links</a> or
      <a href='../images.html'>images</a>.
    </p>
    <h2>Character Sets</h2>
    <p>You can use UTF-8 to count in Turkish:</p>
    <ol>
      <li>bir</li>
      <li>iki</li>
      <li>üç</li>
      <li>dört</li>
      <li>beş</li>
    </ol>
    <<Reserved Characters>>
    <<Curly Quotes>>
  </body>
</html>
#+end_src

Unzip images.

#+begin_src shell :dir odin/assignments/foundations/interneting-links-and-images/
unzip images-4149f7.zip
rm images-4149f7.zip
#+end_src

#+RESULTS:
| Archive:   | images-4149f7.zip |
| inflating: | -4149f7.zip       |

Absolute links.

~<<links>> +≡~

#+begin_src html :noweb-ref links
<li>Absolute links, like to
  <a href='https://developer.mozilla.org/en-US/docs/Web/HTML'
    target='_blank'>Mozilla
    Developer Network</a>,
  which is a very good resource for web developers.
</li>
#+end_src

Relative Links.

~<<links>> +≡~

#+begin_src html :noweb-ref links
<li>Relative links, like to our <a href='misc/extras.html'>extras page</a>.
</li>
#+end_src

~<<links>> +≡~

#+begin_src html :noweb-ref links
<!-- This won't work for our local HTML files -->
<li>Root-relative links, like to the
  <a href='/'>home page</a>
  of our website, but those aren't useful to us right now.
</li>
#+end_src

Add the images.
First a JPG, good for *pictures* (large color palettes).

~<<images>> +≡~

#+begin_src html :noweb-ref images
<h2>JPGs</h2>
<p>JPG images are good for photos.</p>
<img src='images/mochi.jpg' width='75'
<<alt jpg>>
  >
#+end_src

Then a GIF, for *animations*, (short color palettes, crude transparency).

~<<images>> +≡~

#+begin_src html :noweb-ref images
<h2>GIFs</h2>
<p>GIFs are good for animations.</p>
<img src='images/mochi.gif' width='75'
<<alt gif>>
  >
#+end_src

Now a PNG, good transparency, large color palletes, but bigger than JPG.
Useful for small images that need good transparency, like icons and logos.

~<<images>> +≡~

#+begin_src html :noweb-ref images
<h2>PNGs</h2>
<p>PNGs are good for icons and logos.</p>
<img src='images/mochi.png' width='75'
<<alt png>>
  >
#+end_src

Finally the SVG, /vector/ based (as opposed to /pixel/-): scales without loss of quality.
Use them instead of PNGs whenever possible.

~<<images>> +≡~

#+begin_src html :noweb-ref images
<h2>SVGs</h2>
<p>SVGs are <em>amazing</em>. Use them wherever you can.</p>
<img src='images/mochi.svg' width='75'
<<alt svg>>
  >
#+end_src

~<<alt jpg>> +≡~

#+begin_src html :noweb-ref alt jpg
alt='A mochi ball in a bubble'
#+end_src

~<<alt gif>> +≡~

#+begin_src html :noweb-ref alt gif
alt='A dancing mochi ball'
#+end_src

~<<alt png>> +≡~

#+begin_src html :noweb-ref alt png
alt='A mochi ball'
#+end_src

~<<alt svg>> +≡~

#+begin_src html :noweb-ref alt svg
alt='A mochi ball with Bézier handles'
#+end_src

~<<Curly Quotes>> +≡~

#+begin_src html :noweb-ref Curly Quotes
<p>If you&rsquo;re into &ldquo;web typography,&rdquo; you&rsquo;ll also find
   yourself using curly quotes quite a bit.
</p>
#+end_src

**** Reserved Characters
~<<Reserved Characters>> +≡~

#+begin_src html :noweb-ref Reserved Characters
<h2>HTML Entities</h2>
<p> There are three reserved characters in HTML:
  <strong>&lt;</strong> <strong>&gt;</strong> and <strong>&amp;</strong>.
  You should always use HTML entities for these three characters.
</p>
#+end_src

** Seinfeld Checkmark
[[file:images/2025-09-27_seinfeld.jpeg]]

* [2025-09-26 Fri]
** Feel like snowballing.
Was drifting and rabbit-holling, as per usual
Checking out the [[https://www.theodinproject.com/dashboard][Odin Project]], thought it was cool they also develop /character/.
Grit, resilience, and the rollercoaster to mastery were eye-openers to me.

Asked ChatGPT for help there.
Got realistic market analysis, criticism about main goal, specific roadmap with projects, and milestones.

Started applying the Seinfeld checkmarks.
I want to code a minimum of 1 hour every day.
Almost procrastinated until I bought a cool sheet with the squares, but ended up doing it by hand.

[[file:images/2025-09-26_seinfeld.jpeg]]

I really like those sites that allow you to code online.
Did 3 min of Exercism, elisp.
But then felt guilty, because I was derailing from the reading materials from Odin.
I want to code in other languages, besides JS.
I'll make sure to include them.
I want it to be also fun and enjoyable :)

Decided to turn this into a journal for accountability.
A bit of afraid this will derail me (happened in the past), but more confident on my resilience and emotional regulation skills this time.
Let's see.

Reading a lot of the initial material from Odin.
Decided on the Foundations.
Gonna follow this one---and *not* derail!
Need to feel secure about this.
But have to be careful about rabbit holes.

Personally, I tend to try to become a "specialist" on every detail.
Many times I don't get past the first stages of the learning process.
Journaling helps me a lot here.

Just opened a new issue on Odin's page.
I want to start collaborating.
It's a really easy one, but it's a start.

Just found out I goofed-up: the /real/ issue was my eagerness...
The issue is non-existant: I misread the text...
Well, one good opportunity to learn about this current personality trait!

Fitst session of the day ended.
Could finish all the initial readings and setup stuff.

Next: HTML!

** Odin recommended a site that has some JS.
Let's see if I remember it.
It's the code to sum two numbers.
It's a bit more complicated, because involves accessing the DOM.
Let's simplify it.
Just sum the contents of two variables, and assign it to another variable.

#+begin_src js
function sum (a, b) {
    let total = a + b;
    return total;
}
#+end_src

#+begin_quote
function NAME (ARGS) { STATEMENT; ... }
#+end_quote

And it returns with =return=.

Node.js is used to run JS in the server.

HTML: the page has *content*, which is enclosed in *tags*, forming *elements*.

An HTML tag is the markup language entity used to define elements with the content that will be shown on the page.

The element has
1. Opening tag;
2. Content;
3. Closing tag.


Void elements
- Don't have a closing tag; and
- Have no content.


We're coding, baby!

[[file:html-boilerplate/index.html][html-boilerplate/index.html]] ≡

#+begin_src html :tangle html-boilerplate/index.html
<!DOCTYPE html>
<html lang="en">
  <<head Block>>

  <<body Block>>
</html>
#+end_src

The =head= contains metadata and rendering instructions.
*No page content* here.
Always the first element inside =<html>=.

~<head Block> +≡~

#+begin_src html :noweb-ref head Block
<head>
  <<charset>>
  <<title>>
</head>
#+end_src

Let's make sure all glyphs show correctly.

~<<charset>> +≡~

#+begin_src html :noweb-ref charset
<meta charset="UTF-8">
#+end_src

Now the title.

~<<title>> +≡~

#+begin_src html :noweb-ref title
<title>My first page from Odin</title>
#+end_src

~<<body Block>> +≡~

#+begin_src html :noweb-ref body Block
<body>
  <<body Contents>>
</body>
#+end_src

Now add this to Emacs =web-mode=.

#+begin_src elisp
(add-to-list 'web-mode-snippets
               '("my-odin-html-boilerplate"
                 "<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>My first page from Odin</title>
  </head>

  <body>
  </body>
</html>
"))
#+end_src

~<<body Contents>> +≡~

#+begin_src html :noweb-ref body Contents
<h1>Hello, World!</h1>
#+end_src

And W3 validate, baby!

I did some coding in HTML, and some debugging in Emacs.  Either Org or =noweb= were misbehaving.
Didn't know which though---I just restarted Emacs, and everything went back to normal.
Could apply the steps recommended by Odin for analyzing the problem, and it helped.

** 1h Coding, Hello World, HTML Boilerplate
:PROPERTIES:
:header-args: :session hello world
:END:
End of the day, after busking.
Kinda desperate that I didn't code today's 1h.
But there's plenty of time.
Thought of doing some elisp, but wanna focus on JS.

Let's try Exercism.
Can't really do the exercises without knowing the language, and don't think grinding on Exercism is a good use of my time.

Gonna go back to Odin, even if it is more /theory/ now.
There's hopefully some coding even now in the beginning.
If not, I'll reserve some time later and code elisp.

** Working with Text
*** Create a blog post
#+begin_quote
Create a plain blog article page which uses different headings, uses paragraphs, and has some text in the paragraphs bolded and italicized.
You can use Lorem Ipsum to generate dummy text, in place of real text as you build your sites.
#+end_quote

[[file:odin/assignments/foundations/working-with-text/index.html][odin/assignments/foundations/working-with-text/index.html]] ≡

#+begin_src html :tangle odin/assignments/foundations/working-with-text/blog-post.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>Lorem ipsum</title>
  </head>

  <body>
    <h1>Phasellus neque orci, porta a, aliquet quis, semper a, massa</h1>
    <p>Aliquam erat volutpat.  Nunc eleifend <em>leo vitae magna</em>.  In id erat non orci commodo lobortis.  Proin neque massa, cursus ut, gravida ut, lobortis eget, lacus.  Sed diam.  Praesent fermentum tempor tellus.  Nullam tempus.  Mauris ac felis vel velit tristique imperdiet.  Donec at <strong>peed</strong>.  Etiam vel neque nec dui dignissim bibendum.  Vivamus id enim.  Phasellus neque orci, porta a, aliquet quis, semper a, massa.  Phasellus purus.  Pellentesque tristique imperdiet tortor.  Nam euismod <strong>tellus id erat</strong>.</p>

    <h2>Donec hendrerit tempor tellus</h2>
    <p>Pellentesque dapibus suscipit ligula.  Donec posuere augue in quam.  Etiam vel tortor sodales tellus ultricies commodo.  Suspendisse potenti.  Aenean in sem ac leo mollis blandit.  Donec neque quam, dignissim in, mollis nec, sagittis eu, wisi.  Phasellus lacus.  Etiam laoreet quam sed arcu.  Phasellus at dui in ligula mollis ultricies.  Integer placerat tristique nisl.  Praesent augue.  Fusce commodo.  Vestibulum convallis, lorem a tempus semper, dui dui euismod elit, vitae placerat urna tortor vitae lacus.  Nullam libero mauris, consequat quis, varius et, dictum id, arcu.  Mauris mollis tincidunt felis.  Aliquam feugiat tellus ut neque.  Nulla facilisis, risus a rhoncus fermentum, tellus tellus lacinia purus, et dictum nunc justo sit amet elit.</p>

    <h3>Aliquam posuere</h3>
    <p>Nullam eu ante vel est convallis dignissim.  Fusce suscipit, wisi nec facilisis facilisis, est dui fermentum leo, quis tempor ligula erat quis odio.  Nunc porta vulputate tellus.  Nunc rutrum turpis sed pede.  Sed bibendum.  Aliquam posuere.  Nunc aliquet, augue nec adipiscing interdum, lacus tellus malesuada massa, quis varius mi purus non odio.  Pellentesque condimentum, magna ut suscipit hendrerit, ipsum augue ornare nulla, non luctus diam neque sit amet urna.  Curabitur vulputate vestibulum lorem.  Fusce sagittis, libero non molestie mollis, magna orci ultrices dolor, at vulputate neque nulla lacinia eros.  Sed id ligula quis est convallis tempor.  Curabitur lacinia pulvinar nibh.  Nam a sapien.</p>

    <h3>Fusce suscipit, wisi nec facilisis facilisis, est dui fermentum leo, quis tempor ligula erat quis odio</h3>
    <p>Pellentesque dapibus suscipit ligula.  Donec posuere augue in quam.  Etiam vel tortor sodales tellus ultricies commodo.  Suspendisse potenti.  Aenean in sem ac leo mollis blandit.  Donec neque quam, dignissim in, mollis nec, sagittis eu, wisi.  Phasellus lacus.  Etiam laoreet quam sed arcu.  Phasellus at dui in ligula mollis ultricies.  Integer placerat tristique nisl.  Praesent augue.  Fusce commodo.  Vestibulum convallis, lorem a tempus semper, dui dui euismod elit, vitae placerat urna tortor vitae lacus.  Nullam libero mauris, consequat quis, varius et, dictum id, arcu.  Mauris mollis tincidunt felis.  Aliquam feugiat tellus ut neque.  Nulla facilisis, risus a rhoncus fermentum, tellus tellus lacinia purus, et dictum nunc justo sit amet elit.</p>

    <h2>Mauris mollis tincidunt felis</h2>
    <p>Nullam eu ante vel est convallis dignissim.  Fusce suscipit, wisi nec facilisis facilisis, est dui fermentum leo, quis tempor ligula erat quis odio.  Nunc porta vulputate tellus.  Nunc rutrum turpis sed pede.  Sed bibendum.  Aliquam posuere.  Nunc aliquet, augue nec adipiscing interdum, lacus tellus malesuada massa, quis varius mi purus non odio.  Pellentesque condimentum, magna ut suscipit hendrerit, ipsum augue ornare nulla, non luctus diam neque sit amet urna.  Curabitur vulputate vestibulum lorem.  Fusce sagittis, libero non molestie mollis, magna orci ultrices dolor, at vulputate neque nulla lacinia eros.  Sed id ligula quis est convallis tempor.  Curabitur lacinia pulvinar nibh.  Nam a sapien.</p>

    <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  Donec hendrerit tempor tellus.  Donec pretium posuere tellus.  Proin quam nisl, tincidunt et, mattis eget, convallis nec, purus.  Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.  Nulla posuere.  Donec vitae dolor.  Nullam tristique diam non turpis.  Cras placerat accumsan nulla.  Nullam rutrum.  Nam vestibulum accumsan nisl.</p>

    <h3>Lorem ipsum dolor sit amet, consectetuer adipiscing eli</h3>
    <p>Pellentesque dapibus suscipit ligula.  Donec posuere augue in quam.  Etiam vel tortor sodales tellus ultricies commodo.  Suspendisse potenti.  Aenean in sem ac leo mollis blandit.  Donec neque quam, dignissim in, mollis nec, sagittis eu, wisi.  Phasellus lacus.  Etiam laoreet quam sed arcu.  Phasellus at dui in ligula mollis ultricies.  Integer placerat tristique nisl.  Praesent augue.  Fusce commodo.  Vestibulum convallis, lorem a tempus semper, dui dui euismod elit, vitae placerat urna tortor vitae lacus.  Nullam libero mauris, consequat quis, varius et, dictum id, arcu.  Mauris mollis tincidunt felis.  Aliquam feugiat tellus ut neque.  Nulla facilisis, risus a rhoncus fermentum, tellus tellus lacinia purus, et dictum nunc justo sit amet elit.</p>

    <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  Donec hendrerit tempor tellus.  Donec pretium posuere tellus.  Proin quam nisl, tincidunt et, mattis eget, convallis nec, purus.  Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.  Nulla posuere.  Donec vitae dolor.  Nullam tristique diam non turpis.  Cras placerat accumsan nulla.  Nullam rutrum.  Nam vestibulum accumsan nisl.</p>

    <p>Pellentesque dapibus suscipit ligula.  Donec posuere augue in quam.  Etiam vel tortor sodales tellus ultricies commodo.  Suspendisse potenti.  Aenean in sem ac leo mollis blandit.  Donec neque quam, dignissim in, mollis nec, sagittis eu, wisi.  Phasellus lacus.  Etiam laoreet quam sed arcu.  Phasellus at dui in ligula mollis ultricies.  Integer placerat tristique nisl.  Praesent augue.  Fusce commodo.  Vestibulum convallis, lorem a tempus semper, dui dui euismod elit, vitae placerat urna tortor vitae lacus.  Nullam libero mauris, consequat quis, varius et, dictum id, arcu.  Mauris mollis tincidunt felis.  Aliquam feugiat tellus ut neque.  Nulla facilisis, risus a rhoncus fermentum, tellus tellus lacinia purus, et dictum nunc justo sit amet elit.</p>
  </body>
</html>

#+end_src

** First Seinfeld checkmark!
And this coding session warranted me my first one Seinfeld checkmark!

[[file:images/2025-09-26_seinfeld_checked.jpeg]]

* [2025-09-24 Wed]
So, we're learning Web Dev.
Well, at least /I/ am!

Let's make it easier and more fun with Literate Programming in Org Mode.

Starting from the fundamentals.
Web pages are all about navigating through content.
To make things easier, we have:
- HTML, for /structure/;
- CSS, for /style/;
- Javascript, for /logic/.


A minimal html page [[https://html.spec.whatwg.org/multipage/syntax.html?utm_source=chatgpt.com#writing][must have]]:

#+begin_src html
<!DOCTYPE html>
<html>
</html>
#+end_src

Here:
- ~<!DOCTYPE html>~ is the /Document Type Declaration/; it tells the browser the specifications that the page follows.
- ~<html>~ and ~</html>~ enclose the page itself.

The fundamental element of a web page is... well, an =element=.
By definition, an =element= is composed by (example inside the parentheses):
- opening tag (~<html>~);
- everything in between (called /content/);
- closing tag (~</html>~).

The page is made of a /sequence of elements/.

Some elements may be /empty/: they don't have a closing tag.
Example: ~<!DOCTYPE html>~.

A /cool/ first web page would be:

[[file:hello-world.html][hello-world.html]] ≡

#+begin_src html :tangle hello-world.html
<!DOCTYPE html>
<html>
  <p>Hello, World!</p>
</html>
#+end_src

*NOTE:* Here the /contents/ of the =element= ~<p>~ are "Hello, world!".

The ~<html>~ element contains all the elements of the whole page.
Only two tags should be immediately inside it: ~<head>~ and ~<body>~.
~<head>~ contains /metadata/; more about this below.
~<body>~ contains all the /visible/ elements of the page.

Then, each element of the page is either inside ~<head>~ or ~<body>~.
This is illustrated below.

#+begin_src
<html>
|
+- <head>
|
+- <body>
#+end_src

To help make things more clear, we'll call
- /Document/: the elements ~<!DOCTYPE>~ and ~<head>~ together, and
- /Page/: the ~<body>~ element.


For instance: ~hello-world.html~ contains the whole /document/.
When we open it on a browser, we see the (obviously /visible/) /page/, which is inside ~<body>~.

Let's then fix our first page!
It had a ~<p>~ element immediately inside ~<html>~, which is against the specs.
It must be inside ~<body>~.

We also have to add a ~<head>~ inside ~<html>~.
We could leave it empty, but that's not cool.
We'll put a ~<title>~ inside it.
~<title>~ is the /page/ title, that appears as the "name" of the browser window or the page's tab in the browser.

[[file:hello-world-fixed.html][hello-world-fixed.html]] ≡

#+begin_src html :tangle hello-world-fixed.html
<!DOCTYPE html>
<html>
  <head>
    <title>My first fixed page</title>
  </head>
  <body>
    <p>Hello, World!</p>
  </body>
</html>
#+end_src

If you open both ~hello-world.html~ and ~hello-world-fixed.html~, you'll see that they look the same.
This shows how /forgiving/ HTML is.
It really tries to help us get there.
Good on you, HTML!

To help organizing paragraphs, we have /headings/.
They give us /six/ of them: ~<h1>~ to ~<h6>~.

[[file:headings.html][headings.html]] ≡

#+begin_src html :tangle headings.html
<!DOCTYPE html>
<html>
  <head>
    <title>Guess who my favorite was?</title>
  </head>
  <body>
    <h1>S.H.I.E.L.D. Team</h1>
    <h2>Nick Fury</h2>
    <p>Leading S.H.I.E.L.D. with an iron will and one eye on the bigger picture. He always anticipates threats before they happen. His presence commands respect across the superhero community. Nothing slips past his watchful eye.</p>

    <h2>Phil Coulson</h2>
    <p>The calm in the storm, proving loyalty is a superpower. Coulson bridges heroes and humans with tact and understanding. He carries a quiet strength that inspires trust. Even in chaos, his steady hand guides the team.</p>

    <h2>Maria Hill</h2>
    <p>Strategic, precise, and always ready for action. Hill can handle the toughest missions with clarity and focus. Her decisiveness keeps S.H.I.E.L.D. running smoothly. She never hesitates when lives are on the line.</p>

    <h2>Melinda May</h2>
    <p>The Cavalry—silent, deadly, and unstoppable. May’s combat skills are unmatched in the field. Beneath her stoic exterior lies fierce loyalty to her team. Every mission she undertakes is executed with perfection.</p>

    <h2>Leopold Fitz</h2>
    <p>Brains behind the tech, making the impossible possible. Fitz’s inventions often turn the tide in dire situations. His curiosity drives constant innovation. Even under pressure, his intellect shines brilliantly.</p>

    <h2>Skye</h2>
    <h3>Hacker</h3>
    <p>Skye starts out as a brilliant hacker, using her skills to uncover secrets and fight for justice from the shadows. Her curiosity and determination make her a force to be reckoned with. Even before joining S.H.I.E.L.D., she proves she can challenge the system.</p>

    <h3>Agent</h3>
    <p>Joining S.H.I.E.L.D., Skye becomes a trained field agent, learning to balance her intellect with physical skill. She adapts quickly to missions, proving her value to the team. Her loyalty and resourcefulness grow stronger with every challenge.</p>

    <h3>Daughter</h3>
    <p>Skye discovers her true identity as Daisy Johnson, the daughter of a powerful Inhuman. This revelation reshapes her understanding of herself and her powers. She struggles but ultimately embraces her heritage, gaining confidence and purpose.</p>

    <h3>Leader</h3>
    <p>Over time, Skye evolves into a capable leader, guiding missions and protecting her team. Her experience as both an outsider and a hero gives her unique insight. She inspires others through courage, empathy, and decisiveness.</p>

    <h3>Quake</h3>
    <p>Fully embracing her abilities, Skye becomes Quake, wielding seismic powers to combat threats. She balances heroism with personal growth, using her strength to defend the world. Quake is the culmination of her journey, symbolizing resilience, power, and identity.</p>
  </body>
</html>
#+end_src

Interesting to note that the paragraphs inside a heading are *not* nested inside it.

Now comes the ~<br>~ element.
It forces a line break in the text.
It is an /empty/ element, meaning it has no content.
This implies it does *not* need nor have an end tag.

In the example below, the poem has two versions: in the first one, the line breaks are only in the source code, and the second version /forces/ them with ~<br>~.
Only the second one gets the expected result (well, at least on a big screen).

[[file:br.html][br.html]] ≡

#+begin_src html :tangle br.html
<!DOCTYPE html>
<html>
  <head>
    <title>br, but not for Brazil</title>
  </head>
  <body>
    <p>He-Man stands tall, sword held high,
      Shadows flee where his heroes fly.
      In Eternia’s heart, he lights the night,
      Strength and courage his endless might.</p>

    <p>He-Man stands tall, sword held high,<br>
      Shadows flee where his heroes fly.<br>
      In Eternia’s heart, he lights the night,<br>
      Strength and courage his endless might.</p>
  </body>
</html>
#+end_src

Now is a good time to note that the tag names are case-insensitive.
Very sensible of forgiving HTML.
But (there's always one (well, not /always/)) *lowercase is recommended* in general and *demanded* for stricter document types like XHTML.
Let's keep it down low then.
